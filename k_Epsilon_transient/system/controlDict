/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  9
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     pimpleFoam;

startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         15; //1000

deltaT         1e-3;

writeControl    timeStep;

writeInterval   100; //50

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression off;

timeFormat      general;

timePrecision   3;

runTimeModifiable true;



functions
{
    fieldAverage1
    {
        type            fieldAverage;
        libs            ("libfieldFunctionObjects.so");
        enabled         true;
        writeControl    timeStep;
        writeInterval   100;


        fields
        (
            U
            {
                mean        on;
                prime2Mean  on;
                base        time;
            }
        );
    }
    
    
    ////////////

 
 //////////
 calcVorticity
    {
        libs        ("libutilityFunctionObjects.so");
        type        coded;
        name        computeVelocityGradientMag;
        executeControl      timeStep;
        executeInterval     1;
        writeControl        writeTime;
        writeInterval       1;

        codeExecute
        #{
            const volVectorField& U  =  mesh().lookupObject<volVectorField>("U");

            static autoPtr<volScalarField> vorticityMagPtr;
            if(!vorticityMagPtr.valid()) {
              Info << "Creating vorticityMag" << nl;

              vorticityMagPtr.set
              (
                  new volScalarField
                  (
                    IOobject
                    (
                        "vorticityMag",
                        time_.timeName(),
                        U.mesh(),
                        IOobject::NO_READ,
                        IOobject::AUTO_WRITE
                    ),
                    mag(fvc::curl(U))
                  )
              );
            }
            volScalarField &vorticityMag = vorticityMagPtr();
            vorticityMag.checkIn();
            vorticityMag = mag(fvc::curl(U));
            Info << " max vorticityMag " << max(vorticityMag) << nl;
        #};
    }
}

// ************************************************************************* //
